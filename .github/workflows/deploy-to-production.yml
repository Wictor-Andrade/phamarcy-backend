name: Deploy to production

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Login no GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/wictor-andrade/phamarcy-backend:${{ github.sha }} .
          docker tag ghcr.io/wictor-andrade/phamarcy-backend:${{ github.sha }} ghcr.io/wictor-andrade/phamarcy-backend:latest
          docker push ghcr.io/wictor-andrade/phamarcy-backend:${{ github.sha }}
          docker push ghcr.io/wictor-andrade/phamarcy-backend:latest

  migrate-database:
    name: Migrate Database
    runs-on: self-hosted
    needs: build-and-push

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache Dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: ./node_modules
          # garante que cache antigo à mudança de node não seja utilizado
          key: modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install Prisma CLI
        run: |
          npm install --retry 5 --no-progress prisma --save-dev --exact

      #  caso prisma precise recriar os arquivos do client
      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Prisma Migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma migrate deploy

  trigger-dokploy:
    name: Trigger Dokploy
    runs-on: ubuntu-latest

    steps:
      - name: Trigger deploy on Dokploy
        run: curl -X POST ${{ secrets.DOKPLOY_WEBHOOK }}
